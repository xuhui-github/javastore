 Installation

<dependency>
 <groupId>org.duckdb</groupId>
 <artifactId>duckdb_jdbc</artifactId>
 <version>0.9.2</version>
</dependency>


Direct link to JAR: duckdb_jdbc-0.9.2.jar
Usage Example

Class.forName("org.duckdb.DuckDBDriver");
Connection conn = DriverManager.getConnection("jdbc:duckdb:");
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("SELECT 42");


DuckDB Logo for Download
Documentation

Blog
GitHub 13.9k
Support

    Installation
    Guides
    Documentation
        Connect
        Data Import
        Client APIs
            Overview
            C
            C++
            CLI
            Go
            Java
            Julia
            Node.js
            Python
            R
            Rust
            Swift
            Wasm
            ADBC
            ODBC
        SQL
        Extensions
    Development
    Sitemap
    Why DuckDB
    Media
    FAQ
    Code of Conduct
    Live Demo

Java JDBC API
Page Source
Report Issue
Version dev
Version:

    dev
    0.9.2
    0.9.1
    0.9.0
    0.8.1
    0.7.1
    0.6.1
    0.5.1
    0.4.0

Installation

The DuckDB Java JDBC API can be installed from Maven Central. Please see the installation page for details.
Basic API Usage

DuckDBâ€™s JDBC API implements the main parts of the standard Java Database Connectivity (JDBC) API, version 4.1. Describing JDBC is beyond the scope of this page, see the official documentation for details. Below we focus on the DuckDB-specific parts.

Refer to the externally hosted API Reference for more information about our extensions to the JDBC specification, or the below Arrow Methods.
Startup & Shutdown

In JDBC, database connections are created through the standard java.sql.DriverManager class. The driver should auto-register in the DriverManager, if that does not work for some reason, you can enforce registration like so:

Class.forName("org.duckdb.DuckDBDriver");

To create a DuckDB connection, call DriverManager with the jdbc:duckdb: JDBC URL prefix, like so:

Connection conn = DriverManager.getConnection("jdbc:duckdb:");

To use DuckDB-specific features such as the appender, cast the object to a DuckDBConnection:

DuckDBConnection conn = (DuckDBConnection) DriverManager.getConnection("jdbc:duckdb:");

When using the jdbc:duckdb: URL alone, an in-memory database is created. Note that for an in-memory database no data is persisted to disk (i.e., all data is lost when you exit the Java program). If you would like to access or create a persistent database, append its file name after the path. For example, if your database is stored in /tmp/my_database, use the JDBC URL jdbc:duckdb:/tmp/my_database to create a connection to it.

It is possible to open a DuckDB database file in read-only mode. This is for example useful if multiple Java processes want to read the same database file at the same time. To open an existing database file in read-only mode, set the connection property duckdb.read_only like so:

Properties ro_prop = new Properties();
ro_prop.setProperty("duckdb.read_only", "true");
Connection conn_ro = DriverManager.getConnection("jdbc:duckdb:/tmp/my_database", ro_prop);

Additional connections can be created using the DriverManager. A more efficient mechanism is to call the DuckDBConnection#duplicate() method like so:

Connection conn2 = ((DuckDBConnection) conn).duplicate();

Multiple connections are allowed, but mixing read-write and read-only connections is unsupported.
Querying

DuckDB supports the standard JDBC methods to send queries and retrieve result sets. First a Statement object has to be created from the Connection, this object can then be used to send queries using execute and executeQuery. execute() is meant for queries where no results are expected like CREATE TABLE or UPDATE etc. and executeQuery() is meant to be used for queries that produce results (e.g., SELECT). Below two examples. See also the JDBC Statement and ResultSet documentations.

// create a table
Statement stmt = conn.createStatement();
stmt.execute("CREATE TABLE items (item VARCHAR, value DECIMAL(10, 2), count INTEGER)");
// insert two items into the table
stmt.execute("INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)");

try (ResultSet rs = stmt.executeQuery("SELECT * FROM items")) {
    while (rs.next()) {
        System.out.println(rs.getString(1));
        System.out.println(rs.getInt(3));
    }
}
// jeans
// 1
// hammer
// 2

DuckDB also supports prepared statements as per the JDBC API:

try (PreparedStatement p_stmt = conn.prepareStatement("INSERT INTO items VALUES (?, ?, ?);")) {
    p_stmt.setString(1, "chainsaw");
    p_stmt.setDouble(2, 500.0);
    p_stmt.setInt(3, 42);
    p_stmt.execute();
    
    // more calls to execute() possible
}

    Note

    Do not use prepared statements to insert large amounts of data into DuckDB. See the data import documentation for better options.

Arrow Methods

Refer to the API Reference for type signatures
Arrow Export

The following demonstrates exporting an arrow stream and consuming it using the java arrow bindings

import org.apache.arrow.memory.RootAllocator;
import org.apache.arrow.vector.ipc.ArrowReader;
import org.duckdb.DuckDBResultSet;

try (var conn = DriverManager.getConnection("jdbc:duckdb:");
     var p_stmt = conn.prepareStatement("SELECT * FROM generate_series(2000)");
     var resultset = (DuckDBResultSet) p_stmt.executeQuery();
     var allocator = new RootAllocator()) {
  try (var reader = (ArrowReader) resultset.arrowExportStream(allocator, 256)) {
    while (reader.loadNextBatch()) {
      System.out.println(reader.getVectorSchemaRoot().getVector("generate_series"));
    }
  }
}

Arrow Import

The following demonstrates consuming an arrow stream from the java arrow bindings

import org.apache.arrow.memory.RootAllocator;
import org.apache.arrow.vector.ipc.ArrowReader;
import org.duckdb.DuckDBConnection;

// arrow stuff
try (var allocator = new RootAllocator();
     ArrowStreamReader reader = null; /* should not be null of course */
     var arrow_array_stream = ArrowArrayStream.allocateNew(allocator)) {
  Data.exportArrayStream(allocator, reader, arrow_array_stream);

  // duckdb stuff
  try (var conn = (DuckDBConnection) DriverManager.getConnection("jdbc:duckdb:")) {
    conn.registerArrowStream("adsf", arrow_array_stream);

    // run a query
    try (var stmt = conn.createStatement();
         var rs = (DuckDBResultSet) stmt.executeQuery("SELECT count(*) FROM adsf")) {
      while (rs.next()) {
        System.out.println(rs.getInt(1));
      }
    }
  }
}

Streaming Results

Result streaming is opt-in in the JDBC driver - by setting the jdbc_stream_results config to true before running a query. The easiest way do that is to pass it in the Properties object.

Properties props = new Properties();
props.setProperty(DuckDBDriver.JDBC_STREAM_RESULTS, String.valueOf(true));

Connection conn = DriverManager.getConnection("jdbc:duckdb:", props);

Appender

The appender is available in the DuckDB JDBC driver via the org.duckdb.DuckDBAppender class. The constructor of the class requires the schema name and the table name it is applied to. The appender is flushed when the close() method is called.

Example:

import org.duckdb.DuckDBConnection;

DuckDBConnection conn = (DuckDBConnection) DriverManager.getConnection("jdbc:duckdb:");
Statement stmt = conn.createStatement();
stmt.execute("CREATE TABLE tbl (x BIGINT, y FLOAT, s VARCHAR)");

// using try-with-resources to automatically close the appender at the end of the scope
try (var appender = conn.createAppender(DuckDBConnection.DEFAULT_SCHEMA, "tbl")) {
    appender.beginRow();
    appender.append(10);
    appender.append(3.2);
    appender.append("hello");
    appender.endRow();
    appender.beginRow();
    appender.append(20);
    appender.append(-8.1);
    appender.append("world");
    appender.endRow();
}

Search Shortcut cmd + k | ctrl + k

