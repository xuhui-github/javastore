IntegerProperty x= new SimpleIntegerProperty(10);
IntegerProperty y= new SimpleIntegerProperty(20);
IntegerProperty z= new SimpleIntegerProperty(60);
z.bind(x.add(y));

z.set(7878);//will throw a RuntimeException

To change the value of z directly,you can type the following

z.unbind(); //Unbind z first
z.set(7878); //OK

单向绑定还有一个限制，单个属性同一时刻只能有一个单向绑定。考虑下面对ｚ的两个单向绑定，假设x,y,z,a和b都是IntegerProperty实例。
z= x+y
z= a+b
如果ｘｙａ和ｂ是四个不同的属性，上面对ｚ的绑定是不可能的，试想如果ｘ＝１，ｙ＝２，ａ＝３，和
ｂ＝４，ｚ的值应该是多少　３还是７　这就是为什么一个属性同一时刻只能有一个单向绑定。
重新绑定一个属性到一个单向绑定会解除属性绑定的前一个属性。

IntegerProperty x = new SimpleIntegerProperty(1);
IntegerProperty y = new SimpleIntegerProperty(2);
IntegerProperty a = new SimpleIntegerProperty(3);
IntegerProperty b = new SimpleIntegerProperty(4);
IntegerProperty z = new SimpleIntegerProperty(0);

z.bind(x.add(y));
System.out.println("z=" + z.get()); //3

z.bind(a.add(b));
System.out.println("z= " + z.get()); //7

双向绑定是双向的，有一些限制，只能建立在相同类型的属性之间。双向绑定比单向绑定更自由些，一个
属性同一时刻可以绑定多个值。可以间接改变双向绑定属性的值，改变会反映到所有绑定到该属性的值，
下面的绑定是可能的。
ｘ＝ｙ
ｘ＝ｚ
上面ｘｙｚ总是同步的，三个属性有相同的值，绑定建立后，也可以重新绑定ｘｙｚ

ｘ＝ｚ
ｚ＝ｙ

假定x is 1,y is 2,and z is 3,
  x=y //x=y=2
  x=z //x=z=3 x and y　是双向绑定所以ｘ＝ｚ，ｘ变成３，ｙ的值也改变成３
  ｘ＝ｙ＝ｚ＝３




